
C======================================================================
      SUBROUTINE sda_helix(step_size,vect,vout,F,ptg_flag,isec)
C----------------------------------------------------------------------
C-
C-   Purpose and Methods : Performes tracking of one step in a magnetic
C-                         field. The trajectory is assumed to be helix
C-                         in a constant field taken at the mid point of
C-                         the step. Units are kgauss,centimeters,gev/c.
C-
C-   Inputs  : vect -input vector {x,y,z,Px/P,Py/P,Pz/P,p,m,Q}
C-             step_size - current step size for track propagation
C-             ptg_flag - target field flag. 
C-             isec - CLAS sector
C-
C-   Outputs : vout -same as vect after completion of the step 
C-             F    -magnetic field of the step (mid step) {Bx,By,Bz}
C-   Controls:
C-
C-   Calls: sda_snake, sda_torus
C-
C-   Author  : M.Hansroul
C-   Modified: S.Egli, S.V. Levonian & V. Perevoztichkov
C-             B. Niczyporuk on JUL 9,1993 (version GEANT315) 
C-             F.Klein Nov.1997
C-   Modified: Mikhail V. Kossov
C-             MFM radial nagnetic field grid is added (27 points)
C-
C----------------------------------------------------------------------
      IMPLICIT NONE
      SAVE
*
*  I/O variables
*  -------------
      REAL step_size, vect(9), vout(9), F(3)
      Integer ptg_flag, isec
*
*  Include Files
*  -------------
#include "trktcl_var.inc"
*
*  Local pre-defined variables:
*  ---------------------------
*  RCS information: 
      CHARACTER*132  CFILE, CREVIS, CSTATE, CDATE, CAUTHO, CRCSID
      PARAMETER ( CFILE = '$RCSfile: sda_helix.F,v $')
      PARAMETER ( CREVIS = '$Revision: 1.8 $')
      PARAMETER ( CSTATE = '$State: Exp $')
      PARAMETER ( CDATE = '$Date: 2008/03/16 04:33:25 $')
      PARAMETER ( CAUTHO = '$Author: fklein $')
      DATA CRCSID/
     1'$Id: sda_helix.F,v 1.8 2008/03/16 04:33:25 fklein Exp $
     3'/
*  Module information:
      CHARACTER*132  CRNAME, CRAUTH
      CHARACTER*132  CRMESS
      PARAMETER (CRNAME='SDA_HELIX')
      PARAMETER (CRAUTH='Franz Klein')
C
C Local parameters
      INTEGER i, ix,iy,iz, ipx,ipy,ipz,ipp,im,iq
      REAL xyz(3),H(4),HXP(3), sixth, econ, a1,a2,a3,a4,a5,a6
      REAL temx,H2XY,HP,RHO,TET,SINT,SINTT,TSINT,COS1T, ch
      REAL Fpt(3), sinsec(6),cossec(6),twopi, detpos(3),Fdip(3)
      integer ifirst
      data ifirst /1/
C
      PARAMETER (ix=1,iy=2,iz=3,ipx=4,ipy=5,ipz=6,ipp=7,im=8,iq=9)
      PARAMETER (sixth = 1./6.)
      PARAMETER (econ  = 2.9979251E-4)
C
      IF(ifirst.EQ.1) THEN
        twopi  = ACOS(-1.)*2
C Initialize array for rotation to sectors
        DO i=1,6
          sinsec(i) = SIN(FLOAT(i-1) * (twopi/6.))
          cossec(i) = COS(FLOAT(i-1) * (twopi/6.))
        ENDDO
        ifirst = 0
      ENDIF

C If neutral particle or no magnetic field trajectory is a straight line.
      ch = vect(9)
      IF(ch.EQ.0. .or. ipar_trk_magtyp.EQ.5) GO TO 10
C
C Get Magnetic Field (SNAKE or TORUS or UNIFORM or NONE)
C
C Find a mid point on the step for magnetic field retrieving.
      xyz(1) = vect(ix) + 0.5*step_size*vect(ipx)
      xyz(2) = vect(iy) + 0.5*step_size*vect(ipy)
      xyz(3) = vect(iz) + 0.5*step_size*vect(ipz)
C Go to DST coordinate system
      temx   = xyz(1)
      xyz(1) = xyz(2)
      xyz(2) = xyz(3)
      xyz(3) = temx
C
      IF(ipar_trk_magtyp.LE.0) THEN
C Read Table generated by TORUS
C ... M.Kossov correction starts here
       IF(ipar_trk_bgridtyp.EQ.2) THEN
CCCCCC         PRINT*,'MFM is called'
         CALL MFM_get27(xyz,F)
CCCCCC         CALL MFM_getmf(xyz,F)
       ELSE
C ... M.Kossov correction ends here + see ENDIF below 
        CALL SDA_SNAKE(xyz,F)
        IF(ipar_poltarget_current.NE.0.and.ptg_flag.eq.0) THEN
          xyz(3) = xyz(3) - SNGL(dpar_TargetMagPos(3))
          if(ipar_trk_magtyp.EQ.-4) then
             if(isec.le.0 .or. isec.gt.6) isec=1
             detpos(1)=xyz(1)*cossec(isec)-xyz(2)*sinsec(isec)
             detpos(2)=xyz(1)*sinsec(isec)+xyz(2)*cossec(isec)
             detpos(3)=xyz(3)
             call sda_snake_dipole(detpos,Fdip)
             Fpt(1)= Fdip(1)*cossec(isec)+Fdip(2)*sinsec(isec)
             Fpt(2)=-Fdip(1)*sinsec(isec)+Fdip(2)*cossec(isec)
             Fpt(3)= Fdip(3)
          else
             CALL sda_snake_pt(xyz,Fpt)
          endif
          F(1) = F(1) + Fpt(1)
          F(2) = F(2) + Fpt(2)
          F(3) = F(3) + Fpt(3)
        ENDIF
       ENDIF ! for the M. Kossov correction made above
      ELSE IF(ipar_trk_magtyp.EQ.4) THEN
C Uniform magnetic field (simple test option)
        F(1) =  0.
        F(2) = -3.
        F(3) =  0.
      ELSE IF (ipar_trk_magtyp.EQ.5) THEN
C No magnetic field
        F(1) = 0.
        F(2) = 0.
        F(3) = 0.
      ELSE
C Calculate magnetic field (1-Torus or 2-MiniTorus or 3-Torus+MIniTorus)
        CALL sda_torus(xyz,F,ipar_trk_magtyp)
      ENDIF
C
C Return Mag. Field in SDA Coordinate System and rescale (if requested)
      temx = F(1)
      F(1) = F(3)
      F(3) = F(2)
      F(2) = temx  
C
C Trajectory propagation in a magnetic field
C
      H2XY = F(1)*F(1) + F(2)*F(2)
      H(4) = F(3)*F(3) + H2XY
      IF (H(4) .LE. 1.E-12) GO TO 10
      H(4) = SQRT(H(4))
      H(1) = F(1)/H(4)
      H(2) = F(2)/H(4)
      H(3) = F(3)/H(4)
      H(4) = H(4)*econ
C
      HXP(1) = H(2)*vect(ipz) - H(3)*vect(ipy)
      HXP(2) = H(3)*vect(ipx) - H(1)*vect(ipz)
      HXP(3) = H(1)*vect(ipy) - H(2)*vect(ipx)
C 
      HP = H(1)*vect(ipx) + H(2)*vect(ipy) + H(3)*vect(ipz)
      RHO = -ch*H(4)/vect(ipp)
      TET = RHO*step_size
      IF(ABS(TET).GT.0.15) THEN
         SINT  = SIN(TET)
         SINTT = (SINT/TET)
         TSINT = (TET-SINT)/TET
         COS1T = 2.*(SIN(0.5*TET))**2/TET
      ELSE
         TSINT = sixth*TET**2
         SINTT = (1. - TSINT)
         SINT  = TET*SINTT
         COS1T = 0.5*TET
      ENDIF
C
      a1 = step_size*SINTT
      a2 = step_size*COS1T
      a3 = step_size*TSINT*HP
      a4 =-TET*COS1T
      a5 = SINT
      a6 = TET*COS1T*HP
C 
      vout(ix)  = vect(ix)  + (a1*vect(ipx) + a2*HXP(1) + a3*H(1))
      vout(iy)  = vect(iy)  + (a1*vect(ipy) + a2*HXP(2) + a3*H(2))
      vout(iz)  = vect(iz)  + (a1*vect(ipz) + a2*HXP(3) + a3*H(3)) 
      vout(ipx) = vect(ipx) + (a4*vect(ipx) + a5*HXP(1) + a6*H(1))
      vout(ipy) = vect(ipy) + (a4*vect(ipy) + a5*HXP(2) + a6*H(2))
      vout(ipz) = vect(ipz) + (a4*vect(ipz) + a5*HXP(3) + a6*H(3)) 
      vout(ipp) = vect(ipp)
      vout(im ) = vect(im )
      vout(iq ) = vect(iq )
      GO TO 999
C
C Trajectory is a straight line ( no magnetic field or neutral particle)
C 
   10 CONTINUE
      vout(ipp) = vect(ipp)
      vout(im ) = vect(im )
      vout(iq ) = vect(iq )
      DO 20 i = 1,3
        vout(i)   = vect(i) + step_size*vect(i+3)
        vout(i+3) = vect(i+3)
   20 CONTINUE
C
  999 RETURN
      END
