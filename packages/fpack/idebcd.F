*CMZ :  1.00/00 16/12/94  17.00.00  by  Pavel Binko
*-- Author :    Pavel Binko   16/12/94
      FUNCTION IDEBCD(ITEXT)
*
      INTEGER ITEXT(2)
*
************************************************************************
*
*     =1   if text is EBCDIC upper case
*     =0   else
*
************************************************************************
*
      CHARACTER TEXT*8, CHA*4
*KEEP,ARATOE.
      INTEGER ATOE(0:255)
*KEEP,ARETOA.
      INTEGER ETOA(0:255)
*KEEP,DTATOE.
      DATA (ATOE(I),I=0,255) /
     +   0, 64, 64, 64, 64,  9, 64, 64, 64, 64, 64, 64, 64, 13, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 90,127,123, 91,108, 80,125, 77, 93, 92, 78,107, 96, 75, 97,
     + 240,241,242,243,244,245,246,247,248,249,122, 94, 76,126,110,111,
     + 124,193,194,195,196,197,198,199,200,201,209,210,211,212,213,214,
     + 215,216,217,226,227,228,229,230,231,232,233,173,224,189, 95,109,
     + 121,129,130,131,132,133,134,135,136,137,145,146,147,148,149,150,
     + 151,152,153,162,163,164,165,166,167,168,169,192, 79,208,161, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
     +  64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 /
*KEEP,DTETOA.
      DATA (ETOA(I),I=0,255) /
     +   0, 32, 32, 32, 32, 32, 32, 32, 32,  5, 32, 32, 32, 13, 32, 32,
     +  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     +  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     +  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
     +  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 46, 60, 40, 43,124,
     +  38, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 36, 42, 41, 59, 94,
     +  45, 47, 32, 32, 32, 32, 32, 32, 32, 32, 32, 44, 37, 95, 62, 63,
     +  32, 32, 32, 32, 32, 32, 32, 32, 32, 96, 58, 35, 64, 39, 61, 34,
     +  32, 97, 98, 99,100,101,102,103,104,105, 32, 32, 32, 32, 32, 32,
     +  32,106,107,108,109,110,111,112,113,114, 32, 32, 32, 32, 32, 32,
     +  32,126,115,116,117,118,119,120,121,122, 32, 32, 32, 91, 32, 32,
     +  32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 93, 32, 32,
     + 123, 65, 66, 67, 68, 69, 70, 71, 72, 73, 32, 32, 32, 32, 32, 32,
     + 125, 74, 75, 76, 77, 78, 79, 80, 81, 82, 32, 32, 32, 32, 32, 32,
     +  92, 32, 83, 84, 85, 86, 87, 88, 89, 90, 32, 32, 32, 32, 32, 32,
     +  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 32, 32, 32, 32, 32, 32 /
*KEND.
*
      ICH=ITEXT(1)
*KEEP,CHAICH.
*     get char*4 from hollerith 4H
#ifndef Linux
      CHA=CHAR(IAND(ISHFT(ICH,-24),255))//CHAR(IAND(ISHFT(ICH,-16),255))
     +  //CHAR(IAND(ISHFT(ICH,- 8),255))//CHAR(IAND      (ICH     ,255))
#else /* Linux */
      CHA=CHAR(IAND      (ICH     ,255))//CHAR(IAND(ISHFT(ICH,- 8),255))
     +  //CHAR(IAND(ISHFT(ICH,-16),255))//CHAR(IAND(ISHFT(ICH,-24),255))
#endif /* Linux */
*KEND.
      TEXT(1:4)=CHA
      ICH=ITEXT(2)
*KEEP,CHAICH.
*     get char*4 from hollerith 4H
#ifndef Linux
      CHA=CHAR(IAND(ISHFT(ICH,-24),255))//CHAR(IAND(ISHFT(ICH,-16),255))
     +  //CHAR(IAND(ISHFT(ICH,- 8),255))//CHAR(IAND      (ICH     ,255))
#else /* Linux */
      CHA=CHAR(IAND      (ICH     ,255))//CHAR(IAND(ISHFT(ICH,- 8),255))
     +  //CHAR(IAND(ISHFT(ICH,-16),255))//CHAR(IAND(ISHFT(ICH,-24),255))
#endif /* Linux */
*KEND.
      TEXT(5:8)=CHA
*
*     number of ASCII characters
      NA=0
*     number of EBCDIC characters
      NE=0
*
      DO 10 I=1,8
      ICH=ICHAR(TEXT(I:I))
      IF(ATOE(ETOA(ICH)).EQ.ICH) NE=NE+1
      IF(ETOA(ATOE(ICH)).EQ.ICH) NA=NA+1
   10 CONTINUE
*
*     decide
      IF(NE.GT.NA) THEN
         IDEBCD=1
      ELSE
         IDEBCD=0
      END IF
*
      RETURN
      END
