      SUBROUTINE FILL_CSQL()
c     
c     _begin_doc
c     RCS ID string
c     $Id: fill_csql.F,v 1.3 2002/03/27 13:07:27 stepanya Exp $
c     
c     Documentation for subroutine FILL_CSQL
c     
c     Purpose: Fills CSQL bos bank for C_SQL package (MySQL DB).
c     --------
c     
c     Input Parameters:  NON
c     ----------------
c     
c     Output Parameters:  Error flag
c     -----------------
c     
c     Other routines:
c     ---------------
c     
c     Notes:
c     ------
c     
c     Author:    S. Stepanyan     Created:  Fri Mar  7 09:43:25 EST 1997
c     -------
c     
c     Major revisions:
c     ----------------
c     
c     
c     _end_doc
c     
      IMPLICIT NONE
      SAVE
c     
c     _begin_inc
c     include files :
c     ---------------------
c     BOS common block  uncomment the next line for BOS include file
#include "bcs.inc"
#include "wcs.inc"
#include "user_control.inc"
#include "csql.inc"
#include "clasmdl.inc"
c     _end_inc
c     
c     _begin_var
c     input/output variables:
c     -----------------------
c     
c     Local pre-defined variables:
c     ---------------------------
c     RCS information: 
      CHARACTER*132  CFILE, CREVIS, CSTATE, CDATE, CAUTHO, CRCSID
      PARAMETER (CFILE = '$RCSfile: fill_csql.F,v $')
      PARAMETER (CREVIS = '$Revision: 1.3 $')
      PARAMETER (CSTATE = '$State: Exp $')
      PARAMETER (CDATE = '$Date: 2002/03/27 13:07:27 $')
      PARAMETER (CAUTHO = '$Author: stepanya $')
      DATA CRCSID/   
     1     '$Id: fill_csql.F,v 1.3 2002/03/27 13:07:27 stepanya Exp $'   
     2     /   
c     Module information:
      CHARACTER*(*)  CRNAME, CRAUTH
      CHARACTER*100  CRMESS
      PARAMETER (CRNAME='FILL_CSQL')
      PARAMETER (CRAUTH='Stepan Stepanyan')
c     
c     Local User defined variables:
c     -----------------------------
      INTEGER NWRITE
      integer ind,i,istat,lhel
      INTEGER mamind, mbank, ibmpr
      external mamind,mbank
      INTEGER ngood,nqrt,nmatch,ncorr,nboth
      REAL    dp_fcpu,dm_fcpu,dp_slmu,dm_slmu,as_fcpu,as_slmu
      REAL    dp_fcpg,dm_fcpg,dp_slmg,dm_slmg,as_fcpg,as_slmg
      logical first_bmpr
      real    q_t_first, q_t_l_first
      integer lenocc
      external lenocc
      data first_bmpr/.true./
      data q_t_first, q_t_l_first/0.,0./
c     _end_var
c     
c     executable code for routine FILL_PART_NT:
c---- 6----------------------------------------------------------------72
c     
c     
c++ addition done on 10/4/06 to get corrected helicity information
      if(lhelcor) then
         call reslun('helfile', lhel, istat) 
         if(istat.eq.1) then
            nhel=0
            i=0
            open(UNIT=lhel,FILE=helfile(1:lenocc(helfile)),STATUS='OLD',ERR=101)
            do while(i.lt.nhelmax)
               i=i+1
               read(lhel,*,END=102,ERR=102)
     >              tgood(i),nev(i),lev(i)
     >              ,truehel(i),tr26hel(i),thel(i)
     >              ,tsync(i),tqrt(i)
     >              ,tcount(i),tt(i)
     >              ,tscal(i),hls(i,1)
     >              ,clk(i,1),trt(i,1),fcp(i,1),slm(i,1)
     >              ,bp1(i,1),bp2(i,1),bp3(i,1)
     >              ,clk(i,3),trt(i,3),fcp(i,3),slm(i,3)
     >              ,bp1(i,3),bp2(i,3),bp3(i,3)
            enddo
 102        continue
            nhel=i-1
            print *,'Reading helicity information from table -> ',nhel,' states'
            close(lhel)
c --- Get Statistics
            ngood=0
            ncorr=0
            nqrt =0
            nboth=0
            do i=1,nhel
               if((truehel(i).eq.0.OR.truehel(i).eq.1).AND.
     &            (tr26hel(i).eq.0.OR.tr26hel(i).eq.1)) then
	           nboth=nboth+1	
                   if(truehel(i).eq.tr26hel(i)) ncorr=ncorr+1
               endif
               if(tgood(i).gt.1) then
                  ngood=ngood+1
                  nqrt=int(tgood(i))
               endif
            enddo
	    if(nboth.eq.0) nboth=1
            nmatch=0
            do i=1,nhel
               nmatch=nmatch+tscal(i)
            enddo
            
            dp_fcpu=0
            dm_fcpu=0
            dp_slmu=0
            dm_slmu=0
            dp_fcpg=0
            dm_fcpg=0
            dp_slmg=0
            dm_slmg=0
            if(nmatch.gt.0) then
               do i=1,nhel
                  if(tgood(i).gt.1) then
                     if(truehel(i).eq.1) then
                        dp_fcpu=dp_fcpu+fcp(i,1)
                        dp_slmu=dp_slmu+slm(i,1)
                        dp_fcpg=dp_fcpg+fcp(i,3)
                        dp_slmg=dp_slmg+slm(i,3)
                     else
                        dm_fcpu=dm_fcpu+fcp(i,1)
                        dm_slmu=dm_slmu+slm(i,1)
                        dm_fcpg=dm_fcpg+fcp(i,3)
                        dm_slmg=dm_slmg+slm(i,3)
                     endif
                  endif
               enddo
               as_fcpu=100*(dp_fcpu-dm_fcpu)/(dp_fcpu+dm_fcpu)
               as_slmu=100*(dp_slmu-dm_slmu)/(dp_slmu+dm_slmu)
               as_fcpg=100*(dp_fcpg-dm_fcpg)/(dp_fcpg+dm_fcpg)
               as_slmg=100*(dp_slmg-dm_slmg)/(dp_slmg+dm_slmg)
            endif
            print *,'Number of helicity states from TGBI bank = ', nhel
            print *,'Number of states with corrected helicity = ', ngood
            print *,'Number of quartets = ',nqrt
            write(*,'(a64,F5.1,a2)')' Comparison between online and offline algorithm successful at: ', ncorr*1./nboth*100, ' %'
            write(*,'(a64,F5.1,a2)')' Match between HLS and TGBI banks successful at:                ', nmatch*1./nhel*100, ' %'
            print *,'Charge asymmetry from Ungated Scalers:'
            write(*,'(a48,F6.3,a2)')'                                       FCup -> ',as_fcpu, ' %'
            write(*,'(a48,F6.3,a2)')'                                       SLM  -> ',as_slmu, ' %'
            print *,'Charge asymmetry from Gated Scalers:'
            write(*,'(a48,F6.3,a2)')'                                       FCup -> ',as_fcpg, ' %'
            write(*,'(a48,F6.3,a2)')'                                       SLM  -> ',as_slmg, ' %'
 101        continue
         endif
      else
	 ncorr=0
	 nmatch=0
         nhel=1
	 as_fcpu=0.
	 as_slmu=0.
	 as_fcpg=0.
	 as_slmg=0.	
      endif

      ibmpr=MAMIND(JW,'BMPR')
      ind = JW(ibmpr)
      IF(ind.NE.0) THEN
         Q_t=rjw(ind + 1)*1.E+06
         Q_t_l=rjw(ind+ 2)*1.E+06
         T_l_T=rjw(ind + 3)
         I_FC=rjw(ind+4)*1.E+09
	 if(first_bmpr) then
	    q_t_first  =Q_t
	    q_t_l_first=Q_t_l
            first_bmpr=.false.
	 endif	    
      ENDIF
c     
      ind=0
      ind=mbank(iw,'CSQL',0,35,1)
      CALL MKFMT(IW,'CSQL','3I,5F,21I,6F')
c     
      totcpu=0.0
      do i=1,14
         totcpu=totcpu+cpusum(i)
      enddo
      if (ind .ne. 0) then
         iw(ind+1)=nevent
         iw(ind+2)=tevent_seen
         iw(ind+3)=ngood_evt

         rw(ind+4)=totcpu
         rw(ind+5)=Q_t-Q_t_first
         rw(ind+6)=q_t_l-Q_t_l_first
         rw(ind+7)=t_l_t
         rw(ind+8)=i_fc
         do i=1,6
            iw(ind+i+8)=nelect(i)
         enddo
         iw(ind+15)=nhbttrk
         iw(ind+16)=ntbttrk
         iw(ind+17)=nprot
         iw(ind+18)=npip
         iw(ind+19)=npim
         iw(ind+20)=ndeut
         iw(ind+21)=nphoton
         iw(ind+22)=nelectp
         iw(ind+23)=nelectn
         do i=1,6
            iw(ind+i+23)=nproton(i)
         enddo
         rw(ind+30)=ncorr*1./nboth*100
         rw(ind+31)=nmatch*1./nhel*100
         rw(ind+32)=as_fcpu
         rw(ind+33)=as_slmu
         rw(ind+34)=as_fcpg
         rw(ind+35)=as_slmg
      endif
      RETURN
      END
c------------------------------------------------------------------------------




