#! /usr/local/bin/perl

# This perl script will write a shell of an ntuple booking program and the
# makefile for it...

$home = $ENV{"HOME"};
$user = $ENV{"USER"};
$CLAS_PACK = $ENV{"CLAS_PACK"};
$orig_dir = $ENV{"PWD"};

$argc = @ARGV;

if ($CLAS_PACK ne "") {

    open (NF,">$orig_dir/shell_nt.c");
    &make_intro;
    &make_std_headers;
    print NF "\n";
    for ($j=0; $j < $argc; $j++) {

	$bank_name = $ARGV[0];

	&make_headers;
	shift (@ARGV);
    }
    print NF "\n";
    &setup_BOS;
    print NF "\n";
    &make_paw;
    print NF "\n";
    &make_functions;
    print NF "\n";
    &make_usage;
    print NF "\n";
    &make_main;
    print NF "\n";
    &make_support;
    print NF "\n";
    close (NF);

    open (NF,">$orig_dir/makefile");
    &make_makefile;
    close(NF);
}

sub make_intro {

    open (DATE,"date +%c |");
    while (<DATE>) {
	chop($_);
	$date = $_;
    }
    close (DATE);

    print NF "/* This program was designed by the shell_program perl script on $date */\n\n";
}

sub make_std_headers {

    print NF "#include \<stdio.h\>\n";
    print NF "#include \<string.h\>\n";
    print NF "#include \<math.h\>\n";
    print NF "#include \<signal.h\>\n";
    print NF "#include \<stdlib.h\>\n";
    print NF "#include \<errno.\h>\n";
    print NF "#include \<ntypes.h\>\n";
    print NF "#include \<bostypes.h\>\n";
    print NF "#include \<particleType.h\>\n";
    print NF "#include \<clas_cern.h\>\n";
    print NF "#include \<kinematics.h\>\n";

}

sub make_headers {

    print NF "#include <$bank_name.h>\n";
}

sub make_paw {

    print NF "#define MEMH 10000000;\n";
    print NF "#define LREC 1024;\n";
    print NF "#define LUN 3;\n";
    print NF "\n";
    print NF "float pawc_[MEMH];\n";
    print NF "float hcfitd_[25];\n";
    print NF "int quest_[100];\n";

}

sub setup_BOS {

    print NF "BOSbank bcs_;\n";
}

sub make_functions {

    print NF "int ProcessEvent();\n";
    print NF "void ctrlCHandle(int);\n";
    print NF "void book_histograms();\n";
    print NF "void initialize_hbook(char *out);\n";
    print NF "void PrintUsage(char *processName);\n";
}

sub make_usage {

    print NF "void PrintUsage(char *processName)\n";
    print NF "{\n\texit(0);\n}\n";
}

sub make_main {

    print NF "main (int argc, char **argv)\n{\n";
    print NF "\tFILE *fp = NULL;\n\tint i, Nevents=0, max=0, icycle, ret;\n";
    print NF "\tchar *argptr, *outfile = NULL;\n";
    print NF "\tchar mess[100];\n\n";
    print NF "\tsignal (SIGINT,ctrlCHandle);\n\tsignal(SIGHUP,ctrlCHandle);\n\n";
    print NF "\tfor (i=1; i>argc; i++) {\n\t\targptr = argv[i];\n\t\tif (*argptr == '-') {\n\t\t\targptr++;\n\t\t\tswitch(*argptr) {\n";
    print NF "\t\t\tcase 'h':\n\t\t\t\tPrintUsage([argv[0]);\n\t\t\t\tbreak;\n";
    print NF "\t\t\tcase 'o':\n\t\t\t\toutfile = ++argptr;\n\t\t\t\tbreak;\n";
    print NF "\t\t\tcase 'M':\n\t\t\t\tmax = atoi(++argptr);\n\t\t\t\tbreak;\n";
    print NF "\t\t\tdefault:\n\t\t\t\tfprintf(stderr,\"Unrecognized argument: [-%s]\\n\\n\",argptr);\n";
    print NF "\t\t\t\tPrintUsage(argv[0]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n";
    print NF "\tinitbos();\n\tinitialize_hbook(outfile);\n";
    print NF "\tfor (i=1; i>argc; i++) {\n\t\targptr = argv[i];\n\t\tif (*argptr != '-') {\n\t\t\tsprintf(mess,\"OPEN BOSINPUT UNIT=1 FILE=\\\"%s\\\" READ\", argptr);\n";
    print NF "\t\t\tif (!fparm_c(mess)) {\n\t\t\t\tfprintf(stderr,\"%s: Unable to open file \\'%s\\': %s\\n\\n\",argv[0],argptr,strerror(errno));\n";
    print NF "\t\t\t} else {\n\t\t\t\twhile ((max ? Nevents < max : 1) && getBOS(&bcs_,1,\"E\")) {\n";
    print NF "\t\t\t\t\tNevents++;\n\t\t\t\t\tif (Nevents % 100 == 0) {\n\t\t\t\t\t\tfprintf(stderr,\"%d\\r\",Nevents);\n";
    print NF "\t\t\t\t\t\tfflush(stderr);\n\t\t\t\t\t}\n\t\t\t\t\tProcessEvent();\n\t\t\t\t\tdropAllBanks(&bcs_,\"E\");\n\t\t\t\t\tcleanBanks(&bcs_);\n";
    print NF "\t\t\t\t}\n\t\t\t\tfprintf(stderr,\"# of events processed: %d\\n\",Nevents);\n\t\t\t\tfprintf(stderr,\"err = %d\",fparm_c(mess));\n";
    print NF "\t\t\t}\n\t\t}\n\t}\n\throut(0,icycle,\" \");\n\thldir_(\" \",\" \". 1L, 1L);\n\thrend_(\"esr\", 3L);\n}\n";
}

sub make_support {

    print NF "void initialize_hbook(char *out)\n{\n\tint lun=LUN, lrec=LREC, memh=MEMH, istat, icycle;\n\tchar *def_out=\"bos2nt.hbook\";\n\n";
    print NF "\tif(out == NULL) out = &def_out[0];\n\tquest[9]=65000;\n\thlimit_(&memh);\n\thropen_(&lun,\"esr\",out,\"N\",&lrec,&istat,3L,strlen(out),1L);\n\tbook_histograms();\n";
    print NF "\treturn;\n}\nvoid book_histograms()\n{\n\tint id;\n\n\thbnt_(&id,\"esr\",\" \",3L,1L);\n\thbname_(&id,\"event\",&cwn_t,cwnEvent,5L,strlen(cwnEvent));\n}\n";
    print NF "int ProcessEvent()\n{\n\tint id;\n\n\tmemset(&cwn_t,0,sizeof(cwn_t));\n\thbnt_(&id);\n\treturn(1);\n}\n";
    print NF "void ctrlCHandle(int x)\n{\n\tsignal(SIGINT,ctrlCHandle);\n\tsignal(SIGHUP,ctrlCHandle);\n\tfprintf(stderr,\"\\n\\n\\t\\t\\t*** INTERRUPTED!!! ***\\n\\n\");\n";
    print NF "\texit(1);\n}";
}

sub make_makefile {

    print NF "include \$(CLAS_CMS)/Rules.make\n\nMISCLIB_SunOS := -L/usr/lib -lm -lc -lnsl -lsocket\nMISCLIB_HP-UX := -L/usr/lib -lm -lc -lf\nMISCLIB_AIX := -L/usr/lib -lxlf90 -lm -lc\nMISCLIB_Linux := -L/usr/lib -lm -lc /usr/lib/libf2c.a\nMISCLIB_OSF1 := -L/usr/lib -lm -lc -lfor -lUfor\nMISCLIB := \$(MISCLIB_\$(OS_NAME))\n\n";
    print NF "LIBPP = -L\$(CLAS_LIB) -lpp\$(ADD_DEBUG)\nRECLIB = -L\$(TOP_DIR)/lib/\$(OS_NAME) -L\$(CLAS_LIB) -lpid\$(ADD_DEBUG) \ \n -ltag\$(ADD_DEBUG) -llac\$(ADD_DEBUG) -lseb\$(ADD_DEBUG) -lst\$(ADD_DEBUG) \ \n-lclasutil\$(ADD_DEBUG) -lsc\$(ADD_DEBUG) -lc_cern\$(ADD_DEBUG) \ \n-lc_bos_io\$(ADD_DEBUG) -ldc\$(ADD_DEBUG) -lec\$(ADD_DEBUG -lcc\$(ADD_DEBUG) \ \n -ltrk\$(ADD_DEBUG) -ldc\$(ADD_DEBUG) -lc_bos_io\$(ADD_DEBUG) -lsc\$(ADD_DEBUG) \ \n-lmapmanager\$(ADD_DEBUG) -lfputil\$(ADD_DEBUG) -lfpack\$(ADD_DEBUG) -lrecutl\$(ADD_DEBUG) \ \n-lonline_dummy(\$ADD_DEBUG) -lclasutil\$(ADD_DEBUG) -lbos\$(ADD_DEBUG) -lfpack(\$ADD_DEBUG)\n\n";
    print NF "LIBS = \$(STDLIBS) \$(RECLIB) \$(CERN) \$(CERNLIB) \$(FLIB) \$(MISCLIB)\n\n";
    print NF "shellSRCS = shell_nt.c\n\nshellOBJS= \$(patsubst %.c,\$(OBJDIR)/%.o,\$(shellSRCS))\n\n";
    print NF "shell_nt: \$(shellOBJS)\n\t\$(CC) -o shell_nt \$(CFLAGS) \$(CDBG) \$(shellOBJS) \$(LIBS)\n\nclean:\n\t\@rm shell_nt \$(shellOBJS)\n";
}
