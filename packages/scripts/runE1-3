#! /usr/local/bin/perl

# runE1-3
#     Purpose: Runs the cooking and post processing jobs on the
#              farm through a perl script in order to parse these
#              programs' outputs.

require "ctime.pl";
$host = $ENV{"HOSTNAME"};
$home = $ENV{"HOME"};
$os = $ENV{"OSNAME"};

# set the CLAS_PARMS environment to production prod-1-3

$ENV{'CLAS_PARMS'} = "/group/clasdev/clas/src/prod-1-3/parms";

# Set the location of the progress files

$progress_dir = "/net/fs4/work10/mcaleer/progress";

# Set the location of the exectuables to be run

$ImagePath = "/group/clasdev/clas/src/prod-1-3/bin/$os";

# Get the run number

$run = $ARGV[0];
shift;

#fix to handle permissions screwup
$cmd="chmod +r *";
print "$cmd\n";
system($cmd);

# Check to see what files are on the farm node now

open(X,"ls -l  |")  || die "Could not execute ls command\n";

while (<X>) {
    print;
}

# Get a list of the data files on the farm

open(C,"ls -1 clas*$run* |")  || die "Could not execute ls command\n";

while (<C>) {
	chop;
	push(@files,($_));
}

# Use prod-1-3 version of a1

$cmd = "$ImagePath/a1pro-1-3 ";

# Add the arguments from the submission file

foreach $a (@ARGV) {
	$cmd = $cmd." ".$a;
}

# Add the file names to the a1c command line

foreach $file (@files) {
    $cmd = $cmd." ".$file;
}


print "Processing run $run\n";

# Get the file basename for all processing and logging.
# The end result should be something like run#.A00.00

$basename = $files[0];
$basename =~ s/clas_0*//;

#  Write start information to log file

open(L, ">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

$t = time();

$start_time = &ctime($t);
print L "Process $cmd on $host run $files[0] at ",  $start_time;

chop($start_time);
if ($os eq "Linux") {
    ($doweek, $month, $day, $time, $year) = split(/\s+/, $start_time);
# Added in hopes of removing problem with US/EASTERN years
    if ($year =~ /US/) {
	($doweek,$month,$day,$time,$zone,$year) = split(/\s+/, $start_time);
    }
#
}
else {
    ($doweek, $month, $day, $time, $zone, $year) = split(/\s+/, $start_time);
}

# Open the PERL database

dbmopen(%RUN, $files[0], 0644) || print L "Could not open database for offline\n";

close(L);

$RUN{"Host Node"} = $host;
$RUN{"Command Line"} = $cmd;
$RUN{"Start Time"} = $time;
$RUN{"Start Date"} = "$month $day, $year";
$RUN{"Cooking Start Time"} = $time;
$RUN{"Cooking Start Date"} = "$month $day, $year";

print "$cmd\n";

# Run a1c and parse output

open(A1C, "$cmd 2>&1 |");

while (<A1C>) {
    if ($_ =~ /^# of events:\s*(\d+)/) {
	$RUN{"# of events"} = $1;
    } 
    elsif ($_ =~ /^# of events written:\s*(\d+)/) {
	$RUN{"# of events written"} = $1;
    }    
    elsif ($_ =~ /^total current ([\d.]+).*/) {
	$RUN{"total charge"} = $1;
    }
    if ($_ =~ /^cget: I\/O error/) {
	print "\nGot a cget error. Going to exit job now!\n";
	exit;
    }
    print $_; 
}

close(A1C);

$cmd2 = "ls -1 run*|";

open(E,$cmd2) || die "Could not execute ls command\n";
print "EXECUTE: $cmd2\n";

$ifirst = 1;
while (<E>) {
    print;
    chop;
# Get the names of the cooked files
    push(@cooked_files, ($_));
    if ($ifirst) {
	$first = $_;
	$ifirst = 0;
    }

# Move the cooked files to the tape silo
    $jput = "jputremote  $_ /mss/clas/e1a/production/v1.3/cooked/$_ | ";

    open(F,$jput) || die "Could not $jput \n";

    $RUN{"Output files"} = "/mss/clas/e1a/production/v1.3/cooked/$_ , $RUN{'Output files'}";

    while (<F>) {
	print;
    }
}

open(D,$cmd2) || die "Could not execute ls command\n";

while (<D>) {
    print;
}

# Get rid of old data files

foreach $file (@files) {
    $rmcmd = "rm $file | ";

    print "Performing $rmcmd\n";

    open(RM, $rmcmd) || warn "Could not perform $rmcmd.\n";

    while (<RM>) {
	print;
    }

    close(RM);
}


# Update log file with end of cooking information

open(L, ">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

$t = time();
$end_time = &ctime($t);
print L "Finish $cmd $host run $files[0] at ",  $end_time;
close(L);

chop($end_time);
($doweek, $month, $day, $time, $zone, $year) = split(/\s+/, $end_time);

$RUN{"Cooking End Time"} = $time;
$RUN{"Cooking End Date"} = "$month $day, $year";

# Update log file with start of post processing information

open(L, ">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

$t = time();
$end_time = &ctime($t);
print L "Follow-up processing: $host run $files[0] at ",  $end_time;
close(L);

#####################################################################
#                                                                   #
#        Post Processing Additions                                  #
#                                                                   #
#####################################################################

#
# By: Simeon McAleer, Joe Manak
#   : Florida State University, Jefferson Lab
#   : September 2, 1998
#
# Prototype updates database with information from post processing 
# on cooked files. 


###################################################################
# The below variables are going to be set here just for the       #
# purpose of testing. Once the testing is done all of these       #
# variables should be extracted from the runE1-2 script.          #
###################################################################

$run_num = $run;

$map = "\$CLAS_PARMS/Maps/RUN_CONTROL.map";

###################################################################
# The below variables need to be set for processing               #
###################################################################

# Processing commands to be run
$pdu_cmd = "$ImagePath/pdu -b -o$basename";
$emon_cmd = "$ImagePath/elastic_mon -b -oemon$basename.hb4";
$inemon_cmd = "$ImagePath/inelastic_mon -b -R -P -oine$basename.hb4";
$efilter_cmd = "$ImagePath/e_filter -orun$basename.kaon -b -w1.5 -m0.09 -M0.49 ";
$pid_part_cmd = "$ImagePath/pid_mon -Pf -b -opid_$basename.hbk ";
$pid_seb_cmd = "$ImagePath/pid_mon -b -S -C ";
$physfilt_cmd = "$ImagePath/physfilter -T4 -b -ophys$basename.filt ";
$fcfilt_cmd = "$ImagePath/e_filter -b -R2 -c -oinput.bos ";
$ntup_cmd = "/net/fs1/home/lcsmith/CLAS/bin/Linux/filter_calib ";
#$photon_mon_cmd = 0;

# Location to where processing results should be moved
# The location for now is /work/clas/production = /net/fs5/work6
$pdu_res_loc = "/net/fs4/work10/cooking/v1.3/monitor/pdu";
$pid_res_loc = "/net/fs4/work10/cooking/v1.3/monitor/pid";
$emon_res_loc = "/net/fs4/work10/cooking/v1.3/monitor/emon";
$inemon_res_loc = "/net/fs4/work10/cooking/v1.3/monitor/inemon";
$efilter_res_loc = "/net/fs4/work10/cooking/v1.3/kaons";
$physfilt_res_loc = "/mss/clas/e1a/production/v1.3/monitor/physfilter";
$ntup_res_loc = "/net/fs4/work10/cooking/v1.3/monitor/ec_calib";
#$photon_mon_res_loc = ;

##################################################################

# Update run specific log file

$t = time();

$start_time = &ctime($t);

open(L,">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

print L "\nBeginning post cooking processing at ", $start_time."\n";

close(L);

chop($start_time);
($doweek, $month, $day, $time, $zone, $year) = split(/\s+/, $start_time);

$RUN{"Post Proc Start Time"} = $time;
$RUN{"Post Proc Start Date"} = "$month $day, $year";

# Get values from run control map

&GetMapFloat("beam", "energy", $run, "beam energy", $map);
&GetMapFloat("currents", "torus", $run, "itorus", $map);
&GetMapFloat("currents", "minitorus", $run, "iminit", $map);
&GetMapFloat("currents", "tagger", $run, "itagger", $map);
&GetMapFloat("Faraday_cup", "Q_active", $run, "Map Q_active", $map);
&GetMapFloat("Faraday_cup", "Q_all", $run, "Map Q_all", $map);
&GetMapFloat("Faraday_cup", "Q_live", $run, "Map Q_live", $map);

# Process cooked files using elastic_mon

foreach $file (@cooked_files) {
    $emon_cmd = $emon_cmd." ".$file;
}

&UpdateProgLog("Processing", $emon_cmd);

$RUN{"elastic_mon command"} = $emon_cmd;

open(EMON, "$emon_cmd 2>&1 |") || warn "DB: Could not open $emon_cmd.\n";

open(L,">> $progress_dir/progress$basename.log") || warn "DB: Could not open log file: $progress_dir/progress$basename.log.\n";

while (<EMON>) {
    print L $_;
    if (/^\#  of events processed: (\d+)/) {
	$num_events = $1;
    }
}

close(EMON);

close(L);

# Now move histogram file

$lscmd = "ls -1 emon*.hb4 | ";

print $lscmd."\n";

open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

while (<LS>) {
    print $_;
    chop;
    $mvcmd = "cp $_ $emon_res_loc/$_ | ";
    print $mvcmd."\n";
    $RUN{"elastic_mon file"} = "$emon_res_loc/$_";
    open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
    while (<MV>) {
	print $_;
    }
    close(MV);
}

close(LS);

&UpdateProgLog("Finished", $emon_cmd);

# Process cooked files with pdu
# 
# This version of pdu has trouble with the end of file constraint.
# This reads the total number of events from the elastic_mon results
# and then subtracts 500 to make sure pdu doesn't go over the end of 
# file. 
#

if ($num_events < 60000) {
    $num_constraint = $num_events - 500;
} else {
    $num_constraint = 60000;
}

$pdu_cmd .= " -n$num_constraint ";

foreach $file (@cooked_files) {
    $pdu_cmd = $pdu_cmd." ".$file;
}

&UpdateProgLog("Processing", $pdu_cmd);

$RUN{"pdu command"} = $pdu_cmd;

print $pdu_cmd."\n";

open(PDU, "$pdu_cmd 2>&1 |") || warn "DB: Could not open $pdu_cmd.\n";

while (<PDU>) {
    print $_;
    if (/^pdu: detected pathologies for run/) {
	$junk = <PDU>;
	$sector = 1;
	$region = 1;
	while (<PDU>) {
	    print $_;
	    chop;
	    $_ =~ s/^\s+//;
	    @line = split(/\s+/, $_);
	    $dead = "pdu_s".$sector."r".$region."_dead";
	    $RUN{"$dead"} = $line[2];
	    $hot = "pdu_s".$sector."r".$region."_hot";
	    $RUN{"$hot"} = $line[4];
	    if ($region * $sector == 18) {
		last;
	    }
	    $region += 1;
	    if ($region == 4) {
		$sector += 1;
		$region = 1;
	    }
	}
    }
    if (/^ \*\*\* Stop reading /) {
	print "\n ** DB: Problem with pdu.\n";
	$error = 1;
	last;
    }       
}

close(PDU);

# Move pdu resultant files

if ($error) {
    print "\nDB: No files moved due to problem with pdu.\n";
} else {
    $lscmd = "ls -1 pdu_*.hbk | ";
    
    print $lscmd."\n";

    open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

    while (<LS>) {
	print $_;
	chop;
	$mvcmd = "cp $_ $pdu_res_loc/$_ | ";
	$RUN{"pdu histo file"} = "$pdu_res_loc/$_";
	print $mvcmd."\n";
	open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
	while (<MV>) {
	    print $_;
	}
	close(MV);
    }
    
    close(LS);

    $lscmd = "ls -1 pdu_*.out | ";

    print $lscmd."\n";
    
    open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";
    
    while (<LS>) {
	print $_;
	chop;
	$mvcmd = "cp $_ $pdu_res_loc/$_ | ";
	$RUN{"pdu out file"} = "$pdu_res_loc/$_";
	print $mvcmd."\n";
	open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
	while (<MV>) {
	    print $_;
	}
	close(MV);
    }
    
    close(LS);


    $lscmd = "ls -1 pdu_wire_* | ";
    
    print $lscmd."\n";

    open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";
    
    while (<LS>) {
	print $_;
	chop;
	$mvcmd = "cp $_ $pdu_res_loc/$_ | ";
	$RUN{"pdu wire file"} = "$pdu_res_loc/$_";
	print $mvcmd."\n";
	open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
	while (<MV>) {
	    print $_;
	}
	close(MV);
    }
    
    close(LS);
}

&UpdateProgLog("Finished", $pdu_cmd);

# Process Cooked Files with pid_mon for PART bank

foreach $file (@cooked_files) {
    $pid_part_cmd = $pid_part_cmd." ".$file;
}

&UpdateProgLog("Processing", $pid_part_cmd);

print $pid_part_cmd."\n";

$RUN{"pid PART command"} = $pid_part_cmd;

open(PART, "$pid_part_cmd 2>&1 |") || warn "DB: Could not open $pid_part_cmd.\n";

$stats = 0;

while (<PART>) {
    print $_;
    if ($_ =~ /    Ev   e Ev/) {
	$stats = 1;
	next;
    }
    if ($stats) {
	$_ =~ s/^\s+//;
	@line = split(/\s+/,$_); 
	$RUN{"part_e"} = $line[1];
	$RUN{"part_ep"} = $line[2];
# Calculate % of elastic events
	$percent = $RUN{"part_ep"} / $RUN{"part_e"};
	$percent *= 100;
	($percent) =~ /(\d{1,3}\.\d{2})/;
	$RUN{"part_%_elastic"} = $1;
# End % calculation
	$RUN{"part_gamma"} = $line[3];
	$RUN{"part_piplus"} = $line[5];
	$RUN{"part_piminus"} = $line[6];
	$RUN{"part_p"} = $line[7];
	$RUN{"part_Kplus"} = $line[8];
	$RUN{"part_Kminus"} = $line[9];
	$RUN{"part_n"} = $line[10];
	$RUN{"part_unknown"} = $line[11];
	$RUN{"part_e_nf"} = $line[4];
	$RUN{"part_e_nf"} =~ s/\d*\(//;
	chop($RUN{"part_e_nf"});
	$stats = 0;
    }
}

close(PART);

# Move pid histogram file

$lscmd = "ls -1 pid_*.hbk | ";

print $lscmd."\n";

open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

while (<LS>) {
    print $_;
    chop;
    $mvcmd = "cp $_ $pid_res_loc/$_ | ";
    $RUN{"pid histo file"} = "$pid_res_loc/$_";
    print $mvcmd."\n";
    open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
    while (<MV>) {
	print $_;
    }
    close(MV);
}

close(LS);

&UpdateProgLog("Finished", $pid_part_cmd);

# Process Cooked Files with pid_mon for SEB bank

foreach $file (@cooked_files) {
    $pid_seb_cmd = $pid_seb_cmd." ".$file;
}

&UpdateProgLog("Processing", $pid_seb_cmd);

print $pid_seb_cmd."\n";

$RUN{"pid SEB command"} = $pid_seb_cmd;

open(SEB, "$pid_seb_cmd 2>&1 |") || warn "DB: Could not open $pid_seb_cmd.\n";

$stats = 0;

while (<SEB>) {
    print $_;
    if ($_ =~ /    Ev   e Ev/) {
	$stats = 1;
	next;
    }
    if ($stats) {
	$_ =~ s/^\s+//;
	@line = split(/\s+/,$_); 
	$RUN{"seb_e"} = $line[1];
	$RUN{"seb_ep"} = $line[2];
# Calculate % of elastic events
	$percent = $RUN{"seb_ep"} / $RUN{"seb_e"};
	$percent *= 100;
	($percent) =~ /(\d{1,3}\.\d{2})/;
	$RUN{"seb_%_elastic"} = $1;
# End % calculation
	$RUN{"seb_gamma"} = $line[3];
	$RUN{"seb_piplus"} = $line[5];
	$RUN{"seb_piminus"} = $line[6];
	$RUN{"seb_p"} = $line[7];
	$RUN{"seb_Kplus"} = $line[8];
	$RUN{"seb_Kminus"} = $line[9];
	$RUN{"seb_n"} = $line[10];
	$RUN{"seb_unknown"} = $line[11];
	$RUN{"seb_e_nf"} = $line[4];
	$RUN{"seb_e_nf"} =~ s/\d*\(//;
	chop($RUN{"seb_e_nf"});
	$stats = 0;
    }
}

close(SEB);

&UpdateProgLog("Finished", $pid_seb_cmd);

# Process cooked files with inelastic_mon

foreach $file (@cooked_files) {
    $inemon_cmd = $inemon_cmd." ".$file;
}

&UpdateProgLog("Processing", $inemon_cmd);

$RUN{"inelastic_mon command"} = $inemon_cmd;

print $inemon_cmd."\n";

open(INEMON, "$inemon_cmd 2>&1 |") || warn "DB: Could not open $inemon_cmd.\n";

$stats = 0;

while (<INEMON>) {
    print $_;
    chop;
    if ($_ =~ /^  Nevt   Nelec/) {
	$stats = 1;
	next;
    }
    if ($stats) {
	$_ =~ s/^\s+//;
	@line = split(/\s+/,$_); 
	$RUN{"ine ep"} = $line[2];
	$RUN{"ine epi+"} = $line[3];
	$RUN{"ine epi+pi-p"} = $line[4];
	$RUN{"ine epi+p"} = $line[5];
	$RUN{"ine epi+pi-"} = $line[6];
	$RUN{"ine epi-p"} = $line[7];
	$RUN{"ine eK+"} = $line[8];
	$RUN{"ine eK+p"} = $line[9];
	$stats = 0;
    }
}

close(INEMON);

# Move inelastic_mon histogram file

$lscmd = "ls -1 ine*.hb4 | ";

print $lscmd."\n";

open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

while (<LS>) {
    print $_;
    chop;
    $mvcmd = "cp $_ $inemon_res_loc/$_ | ";
    $RUN{"inelastic_mon hist file"} = "$inemon_res_loc/$_";
    print $mvcmd."\n";
    open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
    while (<MV>) {
	print $_;
    }
    close(MV);
}

close(LS);

&UpdateProgLog("Finished", $inemon_cmd);

# Filter events using e_filter

foreach $file (@cooked_files) {
    $efilter_cmd = $efilter_cmd." ".$file;
}

&UpdateProgLog("Processing", $efilter_cmd);

print $efilter_cmd."\n";

$RUN{"e_filter command"} = $efilter_cmd;

open(FILT, "$efilter_cmd 2>&1 |") || warn "DB: Could not open $efilter_cmd.\n";

while (<FILT>) {
    print $_;
    if ($_ =~ /\# of events written:\s+(\d+)/) {
	$RUN{"kaon filtered events"} = $1;
    }
    if ($_ =~ /^W cut\(s\) chosen/) {
	$line = <FILT>;
	print $line;
	if ($line =~ /min:/) {
	    $line =~ /\s+min:\s+(\d+.\d+)/;
	    $RUN{"efilter W min cut"} = $1;
	}
	$line = <FILT>;
	print $line;
	if ($line =~ /max:/) {
	    $line =~ /\s+max:\s+(\d+.\d+)/;
	    $RUN{"efilter W max cut"} = $1;
	}
    }
    if ($_ =~ /hadron mass squared cut\(s\)/) {
	$line = <FILT>;
	print $line;
	if ($line =~ /min:/) {
	    $line =~ /\s+min:\s+(\d+.\d+)/;
	    $RUN{"efilter hadron MM^2 min cut"} = $1;
	}
	$line = <FILT>;
	print $line;
	if ($line =~ /max:/) {
	    $line =~ /\s+max:\s+(\d+.\d+)/;
	    $RUN{"efilter hadron MM^2 max cut"} = $1;
	}
    }
}

close(FILT);

# Move filtered file

$lscmd = "ls -1 run$basename.kaon | ";

print $lscmd."\n";

open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

while (<LS>) {
    print $_;
    chop;
    $mvcmd = "cp $_ $efilter_res_loc/$_ | ";
    $RUN{"efiltered file"} = "$efilter_res_loc/$_";
    print $mvcmd."\n";
    open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
    while (<MV>) {
	print $_;
    }
    close(MV);
}

close(LS);

&UpdateProgLog("Finished", $efilter_cmd);

# Process cooked files using physfilter

foreach $file (@cooked_files) {
    $physfilt_cmd = $physfilt_cmd." ".$file;
}

&UpdateProgLog("Processing", $physfilt_cmd);

$RUN{"physfilter command"} = $physfilt_cmd;

open(PHYS, "$physfilt_cmd 2>&1 |") || warn "DB: Could not open $phys_cmd.\n";

open(L,">> $progress_dir/progress$basename.log") || warn "DB: Could not open log file: $progress_dir/progress$basename.log.\n";

while (<PHYS>) {
    print L $_;
    print $_;
}

close(PHYS);

close(L);

# Now move output file

$lscmd = "ls -1 phys*.filt | ";

print $lscmd."\n";

open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

while (<LS>) {
    print $_;
    chop;
    $mvcmd = "jputremote $_ $physfilt_res_loc/$_ | ";
    print $mvcmd."\n";
    $RUN{"physfilter file"} = "$physfilt_res_loc/$_";
    open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
    while (<MV>) {
	print $_;
    }
    close(MV);
}

close(LS);

&UpdateProgLog("Finished", $physfilt_cmd);


# Process cooked files using e_filter for forward calorimeter

foreach $file (@cooked_files) {
    $fcfilt_cmd = $fcfilt_cmd." ".$file;
}

&UpdateProgLog("Processing", $fcfilt_cmd);

$RUN{"fc e_filter command"} = $fcfilt_cmd;

open(FC, "$fcfilt_cmd 2>&1 |") || warn "DB: Could not open $fcfilt_cmd.\n";

open(L,">> $progress_dir/progress$basename.log") || warn "DB: Could not open log file: $progress_dir/progress$basename.log.\n";

while (<FC>) {
    print L $_;
}

close(FC);

close(L);

# Now run ntupilizer on output of e_filter in EC calibration mode

&UpdateProgLog("Processing", $ntup_cmd);

$RUN{"ntup command"} = $ntup_cmd;

open(NTUP, "$ntup_cmd 2>&1 |") || warn "DB: Could not open $ntup_cmd.\n";

while (<NTUP>) {
    print;
}

close(NTUP);

# Move ntuple file

$lscmd = "ls -1 *.rzn | ";

print $lscmd."\n";

open(LS, $lscmd) || warn "DB: Could not open $lscmd.\n";

while (<LS>) {
    print $_;
    chop;
    $mvcmd = "cp $_ $ntup_res_loc/run$basename.rzn | ";
    print $mvcmd."\n";
    $RUN{"calib ntuple file"} = "$ntup_res_loc/run$basename.rzn";
    open(MV, $mvcmd) || warn "DB: Could not open $mvcmd.\n";
    while (<MV>) {
	print $_;
    }
    close(MV);
}

close(LS);

&UpdateProgLog("Finished", $ntup_cmd);

# Clean Up

$t = time();

$end_time = &ctime($t);

chop($end_time);
($doweek, $month, $day, $time, $zone, $year) = split(/\s+/, $end_time);

$RUN{"Post Proc End Time"} = $time;
$RUN{"Post Proc End Date"} = "$month $day, $year";

dbmclose(%RUN);

# From original RunE1-2
# Next three 'cp's started life as 'mv's. Change 5/18/97

if (-e "$files[0].dir") {
    $cmd = "cp $files[0].dir /group/clasdev/clas/prod-1-3/database/$files[0].dir";
    system($cmd);
}

if (-e "$files[0].pag") {
    $cmd = "cp $files[0].pag /group/clasdev/clas/prod-1-3/database/$files[0].pag";
    system($cmd);
}

if (-e "$files[0].db") {
    $cmd = "cp $files[0].db /group/clasdev/clas/prod-1-3/database/$files[0].db";
    system($cmd);
}

# Update log file with end of processing information

$t = time();

$end_time = &ctime($t);

open(L,">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

print L "\nEnding post cooking processing at ", $end_time."\n";

close(L);

#

sub UpdateProgLog {
 
# Updates the log file with the status passed to it of the
# command passed to it.


    local($status) = $_[0];
    local($cmd)    = $_[1];
    
    $t = time();

    $start_time = &ctime($t);

    open(L,">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

    print L "\n$status command $cmd at ", $start_time;

    close(L);
}

sub GetMapFloat {

# Queries the map in the PARMS area for the available information
# The order of the passed parameters are the subsystem of the map, 
# the item about which information is wanted from that subsystem,
# the run number, the name to be referenced to in the database,
# and the map location.

    local($sub_system) = $_[0];
    local($item) = $_[1];
    local($run_num) = $_[2];
    local($ref_name) = $_[3];
    local($map) = $_[4];
    
    $cmd = "$ImagePath/get_map_float -m$map -s$sub_system -i$item -t$run_num  ";

    open(CMD, "$cmd 2>&1 |") || warn "\nCouldn't execute $cmd.\n";

    open(L,">> $progress_dir/progress$basename.log") || warn "Could not open log file: $progress_dir/progress$basename.log.\n";

    while (<CMD>) {
	if (/MAP_SYSTEM_ERROR_OPEN/) {
	    print L "\n**** Error with $cmd.\n";
	    print "\n**** Error with $cmd.\n";
	    while (<CMD>) {
		print L $_;
		print $_;
	    }
	} else {
	    print L "$ref_name value is $_";
	    print "$ref_name value is $_";
	    chop;
	    if (/^\d+\.\d+\s+$/) {
		($RUN{$ref_name}) = /^(\d+\.\d+)/ ;
	    }
	}
    }

    close(CMD);

    close(L);
}



