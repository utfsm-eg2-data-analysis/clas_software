#! /usr/local/bin/perl

# makeSub makes the jsub submission script.  It is called by 
#            ProcessRun. From ProcessRun it takes a run number,
#            the executable to be run,  the operating system, and the
#            data location on the silo. Any other arguments or options 
#           are passed to the job on the farm.

#Usage: makeSub [-h] run# +o OS +exe exec [+queue <queue>] [-OPTS] [ARGS]
#        -h                      Print this help message
#        run#                    Run number to be used in job name.
#        +o OS                   Operating system to run the job on.
#        +exe exe                Executable to be run.
#        +queue <queue>          Queue to submit job to.
#        [-OPTS]                 Options preceeded by '-' passed to a1c.
#        [ARGS]                  Other arguments passed on to cooking scripts.
#
#        Environment variable CLAS_DATA must be set.

# Get user name to know who to send mail to
#$name = $ENV{"LOGNAME"};
$name = $ENV{"CLAS_MAIL"};
$data_path = $ENV{"CLAS_DATA"};
$file_filter = $ENV{"FILE_FILT"};

# Set default submission queue
$queue = "";

# Parse through command line arguments

if ($ARGV[0] eq "-h") {
    &PrintUsage;
    exit(0);
}

for ($i = 0; $i <= $#ARGV; $i++) {
    $arg = $ARGV[$i];
    if ($arg =~ /^-.*/) {
	push(@opts, $arg);
     }
     elsif ($arg =~ /^\+(\w*)/) {
	 if ($1 eq "h") {
	     &PrintUsage;
	     exit(0);
	 }
	 elsif ($1  eq "o") {
	     $i++;
	     $os = $ARGV[$i];
	}
	 elsif($1 =~ /^exe/) {
	     $i++;
	     $exe = $ARGV[$i];
	 }
	 elsif($1 =~ /^queue/) {
	     $i++;
	     $queue = $ARGV[$i];
	 }
	 else {
	     push(@arr, $arg);
	 }
     }
    else {
	push(@arr, $arg);
    }
}

@ARGV = @arr;

$run = $ARGV[0];

print STDERR "Processing run: $run\n";

# Get list of input files

@inlist = ();

if ($file_filter =~ /\*/) {
  $cmd = "ls -1 $data_path/*$run* |";
} else {
  @file_list = split(/:/, $file_filter);
  
  $cmd = "ls -1 ";

  foreach (@file_list) {
    $cmd .= "$data_path/*$run*$_* ";
  }

  $cmd .= " | ";
}

open(F,$cmd) || die "$0: Could not execute $cmd.\n";

while (<F>) {
    chop;
    $file = "$_";
# parse the file name
	
    if ($file =~ /.*\/(\S+).*/) {
	$f = $1;
    }
    else {
	$f = $file;
    }
    
    if ($file =~ /\.dat$/) {
      print STDERR "\n$0: Not going to process .dat files. Change makeSub if this is a problem.\n\n";
      next;
    }
    
    print STDERR "FILE: $file ==> $f\n";
    
    push(@inlist,($file));
    print STDERR "Processing file: $file\n";

    open(DATE, "date | ") || die "$0: Could not execute date.\n";
    while (<DATE>) {
      if ($_ =~ /(\w+)\s+(\w+)\s+(\d+)\s+(\d+):(\d+)/) {
	$date = " $1 $2 $3 $4:$5 ";
      }
    }
    close(DATE);
    
    $file =~ s/$data_path\///;

}

# Printout submission file

print "PROJECT: clasg1\n";
print "JOBNAME: Process-$run\n";
print "COMMAND: $exe\n";
print "MAIL: $name\n";
print "OS: $os\n";
if ($queue ne "") {
    print "QUEUE: $queue\n";
}
print "OPTIONS:  ";
foreach $a (@ARGV) {
    print "$a ";
}
foreach $a (@opts) {
    print "$a ";
}
print "\n";
print "INPUT_FILES: ";
foreach $in (@inlist) {
    print "$in ";
}
print "\n";


sub PrintUsage {
    print "\nUsage: $0 [+h] run# +o OS +exe exec [+queue <queue>] [-OPTS] [ARGS]\n";
    print "\t-h \t\tPrint this help message\n";
    print "\trun# \t\tRun number to be used in job name.\n";
    print "\t+o OS \t\tOperating system to run the job on.\n";
    print "\t+exe exec \tExecutable to be run.\n";
    print "\t+queue <queue> \tQueue to submit job to.\n";
    print "\t[-OPTS] \tOptions preceeded by '-' passed to a1c.\n";
    print "\t[ARGS] \tOther arguments passed on to cooking scripts.\n";
    print "\tUses environment variable CLAS_DATA\n";
}







